name: dkube_artifactmanager
description: DKube artifact resource manager
metadata:
  annotations: {platform: Dkube}
  labels:
    platform: Dkube
    logger: dkubepl
    dkube.garbagecollect: "false"
    dkube.garbagecollect.policy: all
    wfid: '{{workflow.uid}}'
    runid: '{{pod.name}}'
inputs:
- {name: user, type: String}
- {name: token, type: String}
implementation:
  container:
    image: ocdr/dkube_launcher:viz
    command:
    - python3
    - -u
    - -c
    - |
      def artifactmgr(user, token):
          import json
          from dkube.sdk.api import DkubeApi
          from dkube.sdk.rsrcs import DkubeCode
          from dkube.sdk.rsrcs import DkubeDataset
          from dkube.sdk.rsrcs import DkubeModel

          api = DkubeApi(token=token)

          # Block to create the code resources here
          # Copy/Paste below lines to create N num of code resources from here
          name = "mnist-1"
          code = DkubeCode(user, name=name)
          code.update_git_details(
              'https://github.com/oneconvergence/dkube-examples-internal/tree/2.0.6/tensorflow/classification/mnist/digits/classifier/program')
          api.create_code(code)

          # Create the input dataset resources here
          name = "mnist-ds"
          dataset = DkubeDataset(user, name=name)
          dataset.update_dataset_source(source='git')
          dataset.update_git_details(
              'https://github.com/oneconvergence/dkube-examples-internal/tree/2.0.6/tensorflow/classification/mnist/digits/classifier/data')
          api.create_dataset(dataset)

          # Create the output dataset resources here.
          output_datasets = ["output-ds-1", "output-ds-2"]
          for name in output_datasets:
              dataset = DkubeDataset(user, name=name)
              dataset.update_dataset_source(source='dvs')
              api.create_dataset(dataset)

          # Create the output model resources here
          output_models = ["output-model-1", "output-model-2"]
          for name in output_models:
              model = DkubeModel(user, name=name)
              model.update_model_source(source='dvs')
              api.create_model(model)

      import argparse
      _parser = argparse.ArgumentParser(prog='dkube_artifactmanager', description='DKube artifact resource manager')
      _parser.add_argument("--user", dest="user", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--token", dest="token", type=str, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = artifactmgr(**_parsed_args)
    args:
    - --user
    - {inputValue: user}
    - --token
    - {inputValue: token}
    env:
      pipeline: "true"
      wfid: '{{workflow.uid}}'
      runid: '{{pod.name}}'
